# -*- coding: utf-8 -*-
"""crab age prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ast7TPE-GC--dDW5IW8FJOZ0Fs5aklO7
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsRegressor
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
from sklearn.svm import SVR
sns.set()

dataKepiting = pd.read_csv('/content/sample_data/CrabAgePrediction.csv')

dataKepiting.head()

dataKepiting.info()

dataKepiting.describe()

"""categorical 1 kolom => sex <br>
numerical           => 8 kolom <br>
target              => numerical 
"""

dataKepiting = dataKepiting.loc[dataKepiting['Height']!=0].reset_index(drop=True)

"""data understanding"""

dataKepiting.Sex.value_counts().plot(kind='bar')

dataKepiting.hist(bins=50,figsize=(20,20))

sns.pairplot(dataKepiting,diag_kind='kde')

sns.heatmap(dataKepiting.corr(),annot=True)

"""data preparation"""

dataKepiting = pd.concat([dataKepiting,pd.get_dummies(dataKepiting['Sex'],prefix='sex',drop_first=True)],axis=1)

dataKepiting.drop(['Sex'],axis=True,inplace=True)

dataKepiting.head()

numericData = ['Length','Diameter','Height','Weight','Shucked Weight','Viscera Weight','Shell Weight']

pca = PCA(n_components=7, random_state=123)

dataKepiting[numericData]

pca.fit_transform(dataKepiting[numericData])

plt.plot(np.cumsum(pca.explained_variance_ratio_))
plt.xlabel('banyaknya principal')
plt.ylabel('persentase')
plt.title('sum of explained variance ratio')

"""pemilihan ckup 1 pca karena telah memenuhji 90% dari data"""

pca = PCA(n_components=1, random_state=123)

dataKepitingTereduksi = pca.fit_transform(dataKepiting[numericData])

dataKepitingTereduksi = pd.concat([pd.DataFrame(dataKepitingTereduksi,columns=['fitur reduksi']),dataKepiting[['sex_M','sex_I','Age']]],axis=1)

dataKepitingTereduksi

X = dataKepitingTereduksi.drop(['Age'],axis=1)
Y = dataKepitingTereduksi['Age']

train_data,test_data,train_target,test_target = train_test_split(X,Y,test_size=0.1,random_state=42)

scaler = StandardScaler()

scaler.fit(np.array(train_data['fitur reduksi']).reshape(-1,1))

train_data['fitur reduksi'] = scaler.transform(np.array(train_data['fitur reduksi']).reshape(-1,1))

test_data['fitur reduksi'] = scaler.transform(np.array(test_data['fitur reduksi']).reshape(-1,1))

train_data.head()

test_data.head()

"""Modeling"""

knn = KNeighborsRegressor()
knn.fit(train_data, train_target)
y_pred_knn = knn.predict(test_data)

reg = reg = LinearRegression()
reg.fit(train_data, train_target)
y_pred_reg = reg.predict(test_data)

svr = SVR()
svr.fit(train_data, train_target)
y_pred_svr = svr.predict(test_data)

"""Evaluation"""

mae = pd.DataFrame(columns=['train', 'test'], index=['KNN','linear','SVR'])
 
model_dict = {'KNN': knn, 'linear': reg, 'SVR': svr}
 
# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
    mae.loc[name, 'train'] = mean_absolute_error(y_true=train_target, y_pred=model.predict(train_data))
    mae.loc[name, 'test'] = mean_absolute_error(y_true=test_target, y_pred=model.predict(test_data))
    mae.loc[name,'rata-rata'] = (mae.loc[name, 'train'] + mae.loc[name, 'test'])/2
 
# Panggil mse
mae

prediksi = test_data.iloc[:1].copy()
pred_dict = {'y_true':test_target[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
 
pd.DataFrame(pred_dict)